"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[62130],{89026:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return h}});var a=n(85893),i=n(11151),r=n(74866),o=n(85162),s=n(23734);const l={id:"docs-video-develop-create-video-object",title:"Create Video Object",hide_title:!0,slug:"./create-video-object",displayed_sidebar:"pushVideoSidebar",sidebar_position:2,image:"/assets/docs/previews/docs_video_develop--create_video_object.png"},d="Create video object overview",c={id:"video/build/docs-video-develop-create-video-object",title:"Create Video Object",description:"Push Video API abstract away connection and encryption methods by exposing methods which lets you create video object that is used for video calls.",source:"@site/docs/video/01-build/02-Develop-Create-Video-Object.mdx",sourceDirName:"video/01-build",slug:"/video/build/create-video-object",permalink:"/docs/video/build/create-video-object",draft:!1,unlisted:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/video/01-build/02-Develop-Create-Video-Object.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"docs-video-develop-create-video-object",title:"Create Video Object",hide_title:!0,slug:"./create-video-object",displayed_sidebar:"pushVideoSidebar",sidebar_position:2,image:"/assets/docs/previews/docs_video_develop--create_video_object.png"},sidebar:"pushVideoSidebar",previous:{title:"Get Started",permalink:"/docs/video/build/get-started"},next:{title:"Initiate Video Call",permalink:"/docs/video/build/initiate-video-call"}},u={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Instantiate Video Object",id:"instantiate-video-object",level:2},{value:"Understanding data variable",id:"understanding-data-variable",level:3},{value:"setData function",id:"setdata-function",level:3},{value:"Push Video Object API",id:"push-video-object-api",level:3}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"create-video-object-overview",children:"Create video object overview"}),"\n",(0,a.jsx)(t.p,{children:"Push Video API abstract away connection and encryption methods by exposing methods which lets you create video object that is used for video calls."}),"\n","\n",(0,a.jsx)(n,{children:(0,a.jsx)("title",{children:"Create Video Object | Push Video | Push Documentation"})}),"\n","\n","\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(t.p,{children:"Some functions require passing the signer object with the function call. Fetching a signer for web3 wallets is quite easy."}),"\n",(0,a.jsxs)(r.Z,{children:[(0,a.jsx)(o.Z,{value:"frontend",label:"When using Frontend",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'// any other web3 ui lib is also acceptable\nimport { useWeb3React } from "@web3-react/core";\n.\n.\n.\nconst { account, library, chainId } = useWeb3React();\nconst signer = library.getSigner(account);\n'})})}),(0,a.jsx)(o.Z,{value:"backend",label:"When using Backend",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'const ethers = require("ethers");\nconst PK = "your_channel_address_secret_key";\nconst Pkey = `0x${PK}`;\nconst signer = new ethers.Wallet(Pkey);\n'})})})]}),"\n",(0,a.jsx)(t.h2,{id:"instantiate-video-object",children:"Instantiate Video Object"}),"\n",(0,a.jsxs)(t.p,{children:["To start video calling wallet addresses, first, you need to declare ",(0,a.jsx)(t.code,{children:"data"}),", ",(0,a.jsx)(t.code,{children:"setData"})," which are essentially a state/variable to hold video call-related data and a function to modify it respectively. "]}),"\n",(0,a.jsx)(t.p,{children:"Here below is how to create the video object:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const videoObject = new PushAPI.video.Video({\n  signer: SignerType;\n  chainId: number;\n  pgpPrivateKey: string;\n  env?: ENV;\n  setData: (fn: (data: VideoCallData) => VideoCallData) => void;\n});\n"})}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Property"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"signer"}),(0,a.jsx)(t.td,{children:"Ethers.js signer"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"chainId"}),(0,a.jsx)(t.td,{children:"ChainId for the video call - Ethereum Mainnet: 1, Polygon Mainnet: 137"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"pgpPrivateKey"}),(0,a.jsx)(t.td,{children:"User's decrypted pgp private key"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"env"}),(0,a.jsxs)(t.td,{children:["Environment variable. Default ",(0,a.jsx)(t.code,{children:"prod"}),". For testing, use ",(0,a.jsx)(t.code,{children:"staging"})]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"setData"}),(0,a.jsx)(t.td,{children:"Function to update the video call data, takes a function as an argument which receives the latest state of data as a param and should return the modified/new state of data"})]})]})]}),"\n",(0,a.jsx)(t.p,{children:"Now let's go over each property individually and understand how to set them."}),"\n",(0,a.jsx)(t.h3,{id:"understanding-data-variable",children:"Understanding data variable"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["The ",(0,a.jsx)(t.code,{children:"data"})," variable is an object that is used to store all of the video call-related data."]}),"\n",(0,a.jsxs)(t.li,{children:["It is of type ",(0,a.jsx)(t.code,{children:"PushAPI.VideoCallData"})," and should be initialized with ",(0,a.jsx)(t.code,{children:"initVideoCallData"}),"."]}),"\n",(0,a.jsx)(t.li,{children:"For React-based projects, this would basically be a React state, and for vanilla JS projects, it will be a simple JS variable."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["The type ",(0,a.jsx)(t.code,{children:"PushAPI.VideoCallData"})," is described below:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// IMediaStream is a custom type that represents a media stream object or null\ntype IMediaStream = MediaStream | null;\n\n// VideoCallStatus is an enum that represents different statuses of a video call\n// These values are used to indicate the current status of a video call\nenum VideoCallStatus {\n  // call hasn't been started yet\n  UNINITIALIZED,\n\n  // call has been started by the initiator but not received by the receiver\n  INITIALIZED,\n\n  // call has been received by the receiver but not connected yet\n  RECEIVED,\n\n  // call has been connected, and both users can interact now\n  // MediaStream (includes both audio and video) exchange is now possible\n  CONNECTED,\n\n  // call has been ended by one of the users\n  DISCONNECTED,\n\n  // retrying to establish the call from the INITIALIZED state\n  RETRY_INITIALIZED,\n\n  // retrying to establish the call from the RECEIVED state\n  RETRY_RECEIVED,\n}\n\ntype VideoCallData = {\n  meta: {\n    // contains meta info of the video call\n    chatId: string; // unique identifier for every push chat\n    initiator: {\n      address: string; // address of the initiator of the call\n      signal: any; // signal data from the initiator\n    };\n    broadcast?: {\n      // will be used in Push Spaces\n      livepeerInfo: any;\n      hostAddress: string;\n      coHostAddress: string;\n    };\n  };\n  // This property is used to store the info of the local peer/user\n  local: {\n    stream: IMediaStream; // the stream object\n    audio: boolean | null; // whether local audio is on or not\n    video: boolean | null; // whether local video is on or not\n    address: string; // address of the local peer/user\n  };\n  incoming: [\n    // This property is used to store the info of an incoming peer/user\n    {\n      stream: IMediaStream; // the stream object\n      audio: boolean | null; // whether incoming audio is on or not\n      video: boolean | null; // whether incoming video is on or not\n      address: string; // address of the incoming peer/user\n      status: VideoCallStatus; // video call status with a particular incoming peer\n      retryCount: number; // no. of retries required in establishing the call\n    },\n  ];\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"initVideoCallData"})," looks like the following:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'// As mentioned earlier, this should be used to initialize the data variable.\nconst initVideoCallData: PushAPI.VideoCallData = {\n  meta: {\n    chatId: "",\n    initiator: {\n      address: "",\n      signal: null,\n    },\n  },\n  local: {\n    stream: null,\n    audio: null,\n    video: null,\n    address: "",\n  },\n  incoming: [\n    {\n      stream: null,\n      audio: null,\n      video: null,\n      address: "",\n      status: VideoCallStatus.UNINITIALIZED, // call is at the UNINITIALIZED status\n      retryCount: 0,\n    },\n  ],\n};\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Creating and initializing the ",(0,a.jsx)(t.code,{children:"data"})," variable is shown below:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'// NOTE: You don\'t have to define initVideoCallData in your project.\n// Just import it using the following and use it:\nimport { initVideoCallData } from "@pushprotocol/restapi/src/lib/video";\n\n// 1. For a vanilla JS project\nlet data: PushAPI.VideoCallData = initVideoCallData;\n\n// 2. For a React project\nimport { useState } from "react";\nconst [data, setData] = useState<PushAPI.VideoCallData>(initVideoCallData);\n'})}),"\n",(0,a.jsx)(t.h3,{id:"setdata-function",children:"setData function"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"setData"})," is a function to update the video call data i.e., the ",(0,a.jsx)(t.code,{children:"data"})," variable."]}),"\n",(0,a.jsxs)(t.li,{children:["It is of type ",(0,a.jsx)(t.code,{children:"(fn: (data: VideoCallData) => VideoCallData) => void"})," and is described below:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"/*\n- fn function is supplied by the caller of setData()\n- fn is a function that accepts current 'data' as input and returns updated 'data'\n*/\nconst setData: : (fn: (data: VideoCallData) => VideoCallData) => void = (fn) => {\n  /*\n    - Here, we are passing the current value of 'data' to fn\n    - The return value of fn() i.e., the updated value of 'data' is assigned back to 'data'\n  */\ndata = fn(data);\n};\n"})}),"\n",(0,a.jsx)(t.h3,{id:"push-video-object-api",children:"Push Video Object API"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Now we are ready to instantiate a new object of the Video class (can be accessed via PushAPI.video.Video) using the ",(0,a.jsx)(t.code,{children:"signer"}),", ",(0,a.jsx)(t.code,{children:"chainId"}),", ",(0,a.jsx)(t.code,{children:"pgpPrivatekey"}),", ",(0,a.jsx)(t.code,{children:"env"})," and the ",(0,a.jsx)(t.code,{children:"setData"})," function."]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const videoObject = new PushAPI.video.Video({\n  signer: SignerType;\n  chainId: number;\n  pgpPrivateKey: string;\n  env?: ENV;\n  setData: (fn: (data: VideoCallData) => VideoCallData) => void;\n});\n"})}),"\n",(0,a.jsx)(s.S5,{href:"https://www.npmjs.com/package/@pushprotocol/restapi#constructor",title:"NPM example of Push Video object contstructor",target:"_blank",children:(0,a.jsx)(t.p,{children:"Video Object Constructor Example"})})]})}function v(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},85162:function(e,t,n){n.d(t,{Z:function(){return o}});n(67294);var a=n(86010),i={tabItem:"tabItem_Ymn6"},r=n(85893);function o(e){var t=e.children,n=e.hidden,o=e.className;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.default)(i.tabItem,o),hidden:n,children:t})}},74866:function(e,t,n){n.d(t,{Z:function(){return w}});var a=n(67294),i=n(86010),r=n(12466),o=n(16550),s=n(20469),l=n(91980),d=n(67392),c=n(50012);function u(e){var t,n;return null!==(t=null===(n=a.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,a.isValidElement)(e)&&((t=e.props)&&"object"==typeof t&&"value"in t))return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))||void 0===n?void 0:n.filter(Boolean))&&void 0!==t?t:[]}function h(e){var t=e.values,n=e.children;return(0,a.useMemo)((function(){var e=null!=t?t:function(e){return u(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}(n);return function(e){var t=(0,d.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function p(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function v(e){var t=e.queryString,n=void 0!==t&&t,i=e.groupId,r=(0,o.k6)(),s=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:i});return[(0,l._X)(s),(0,a.useCallback)((function(e){if(s){var t=new URLSearchParams(r.location.search);t.set(s,e),r.replace(Object.assign({},r.location,{search:t.toString()}))}}),[s,r])]}function b(e){var t,n,i,r,o=e.defaultValue,l=e.queryString,d=void 0!==l&&l,u=e.groupId,b=h(e),f=(0,a.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var i=null!==(t=a.find((function(e){return e.default})))&&void 0!==t?t:a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:o,tabValues:b})})),j=f[0],m=f[1],g=v({queryString:d,groupId:u}),x=g[0],y=g[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),n=(0,c.Nk)(t),i=n[0],r=n[1],[i,(0,a.useCallback)((function(e){t&&r.set(e)}),[t,r])]),I=w[0],V=w[1],C=function(){var e=null!=x?x:I;return p({value:e,tabValues:b})?e:null}();return(0,s.Z)((function(){C&&m(C)}),[C]),{selectedValue:j,selectValue:(0,a.useCallback)((function(e){if(!p({value:e,tabValues:b}))throw new Error("Can't select invalid tab value="+e);m(e),y(e),V(e)}),[y,V,b]),tabValues:b}}var f=n(72389),j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"},m=n(85893);function g(e){var t=e.className,n=e.block,a=e.selectedValue,o=e.selectValue,s=e.tabValues,l=[],d=(0,r.o5)().blockElementScrollPositionUntilNextRender,c=function(e){var t=e.currentTarget,n=l.indexOf(t),i=s[n].value;i!==a&&(d(t),o(i))},u=function(e){var t,n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var a,i=l.indexOf(e.currentTarget)+1;n=null!==(a=l[i])&&void 0!==a?a:l[0];break;case"ArrowLeft":var r,o=l.indexOf(e.currentTarget)-1;n=null!==(r=l[o])&&void 0!==r?r:l[l.length-1]}null===(t=n)||void 0===t||t.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.default)("tabs",{"tabs--block":n},t),children:s.map((function(e){var t=e.value,n=e.label,r=e.attributes;return(0,m.jsx)("li",Object.assign({role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:function(e){return l.push(e)},onKeyDown:u,onClick:c},r,{className:(0,i.default)("tabs__item",j.tabItem,null==r?void 0:r.className,{"tabs__item--active":a===t}),children:null!=n?n:t}),t)}))})}function x(e){var t=e.lazy,n=e.children,i=e.selectedValue,r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var o=r.find((function(e){return e.props.value===i}));return o?(0,a.cloneElement)(o,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:r.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i})}))})}function y(e){var t=b(e);return(0,m.jsxs)("div",{className:(0,i.default)("tabs-container",j.tabList),children:[(0,m.jsx)(g,Object.assign({},e,t)),(0,m.jsx)(x,Object.assign({},e,t))]})}function w(e){var t=(0,f.Z)();return(0,m.jsx)(y,Object.assign({},e,{children:u(e.children)}),String(t))}},11151:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return o}});var a=n(67294);const i={},r=a.createContext(i);function o(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);