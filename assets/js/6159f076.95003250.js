"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[64837],{79774:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return o},metadata:function(){return r},toc:function(){return l}});var i=n(85893),a=n(11151);const o={id:"docs-video-develop-handling-call-retries",title:"Handling Call Retries",hide_title:!0,slug:"./handling-call-retries",displayed_sidebar:"pushVideoSidebar",sidebar_position:5,image:"/assets/docs/previews/docs_video_develop--handling_call_retries.png"},d="Handling call retries overview",r={id:"video/build/docs-video-develop-handling-call-retries",title:"Handling Call Retries",description:"Push video automatically handles the possibility of the call not connecting by retrying the connection. In order to make sure that call retrying works for your dapp, you just need to add the following to our good old event handler of the USER_FEEDS event from @pushprotocol/socket.",source:"@site/docs/video/01-build/05-Develop-Handling-Call-Retries.mdx",sourceDirName:"video/01-build",slug:"/video/build/handling-call-retries",permalink:"/docs/video/build/handling-call-retries",draft:!1,unlisted:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/video/01-build/05-Develop-Handling-Call-Retries.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"docs-video-develop-handling-call-retries",title:"Handling Call Retries",hide_title:!0,slug:"./handling-call-retries",displayed_sidebar:"pushVideoSidebar",sidebar_position:5,image:"/assets/docs/previews/docs_video_develop--handling_call_retries.png"},sidebar:"pushVideoSidebar",previous:{title:"Managing Media Stream",permalink:"/docs/video/build/managing-media-stream"}},s={},l=[];function c(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"handling-call-retries-overview",children:"Handling call retries overview"}),"\n",(0,i.jsxs)(t.p,{children:["Push video automatically handles the possibility of the call not connecting by retrying the connection. In order to make sure that call retrying works for your dapp, you just need to add the following to our good old event handler of the ",(0,i.jsx)(t.code,{children:"USER_FEEDS"})," event from ",(0,i.jsx)(t.code,{children:"@pushprotocol/socket"}),"."]}),"\n",(0,i.jsx)(n,{children:(0,i.jsx)("title",{children:"Handling Call Retries | Push Video | Push Documentation"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",children:"pushSDKSocket?.on(EVENTS.USER_FEEDS, (feedItem: any) => {\n  const { payload } = feedItem || {};\n  // we check for the additionalMeta property in payload.data\n  if (payload.hasOwnProperty('data') && payload['data'].hasOwnProperty('additionalMeta')) {\n    const additionalMeta = payload['data']['additionalMeta'];\n\n    // check for PUSH_VIDEO\n    if (additionalMeta.type === `${ADDITIONAL_META_TYPE.PUSH_VIDEO}+1`){\n      const videoCallMetaData = JSON.parse(additionalMeta.data);\n\n      if (videoCallMetaData.status === VideoCallStatus.RETRY_RECEIVED) {\n        const {\n          signalData,\n          senderAddress\n        } = additionalMeta;\n\n        videoObject.connect({\n          signalData,\n          peerAddress: senderAddress\n        });\n      }\n      else if (videoCallMetaData.status === VideoCallStatus.RETRY_INITIALIZED && videoObject.isInitiator()) {\n        videoObject.request({\n          senderAddress: data.local.address,\n          recipientAddress: data.incoming[0].address,\n          chatId: data.meta.chatId,\n          retry: true,\n        });\n      }\n      else if (videoCallMetaData.status === VideoCallStatus.RETRY_INITIALIZED && !videoObject.isInitiator()) {\n        const {\n          signalData,\n        } = additionalMeta;\n\n        videoObject.acceptRequest({\n          signalData,\n          senderAddress: data.local.address,\n          recipientAddress: data.incoming[0].address,\n          chatId: data.meta.chatId,\n          retry: true,\n        });\n      }\n    }\n  }\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return d}});var i=n(67294);const a={},o=i.createContext(a);function d(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);