"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[38732],{45912:function(t,n,e){e.r(n),e.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return d}});var i=e(85893),o=e(11151);const r={id:"docs-notifications-tutorial-token-transfer-notification-from-smart-contract",title:"Token transfer notification from smart contract",hide_title:!0,slug:"./token-transfer-notification-from-smart-contract",displayed_sidebar:"pushNotificationSidebar",sidebar_position:4,image:"/assets/docs/previews/docs_notifications_tutorial--token_transfer_notification_from_smart_contract.png"},a="Overview",s={id:"notifications/tutorials/docs-notifications-tutorial-token-transfer-notification-from-smart-contract",title:"Token transfer notification from smart contract",description:"This tutorial explains how you can integrate notifications directly in your smart contract by importing Push comm smart contract and using its interface. We will be creating a simple token transfer notification for this guide.",source:"@site/docs/notifications/04-tutorials/04-Tutorial-Smart-Contract-Notifications.mdx",sourceDirName:"notifications/04-tutorials",slug:"/notifications/tutorials/token-transfer-notification-from-smart-contract",permalink:"/docs/notifications/tutorials/token-transfer-notification-from-smart-contract",draft:!1,unlisted:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/notifications/04-tutorials/04-Tutorial-Smart-Contract-Notifications.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"docs-notifications-tutorial-token-transfer-notification-from-smart-contract",title:"Token transfer notification from smart contract",hide_title:!0,slug:"./token-transfer-notification-from-smart-contract",displayed_sidebar:"pushNotificationSidebar",sidebar_position:4,image:"/assets/docs/previews/docs_notifications_tutorial--token_transfer_notification_from_smart_contract.png"},sidebar:"pushNotificationSidebar",previous:{title:"Advance - Create your channel using Safe",permalink:"/docs/notifications/tutorials/create-your-channel-using-safe"},next:{title:"Advance - Create channel and notif from smart contract",permalink:"/docs/notifications/tutorials/advance-create-channel-and-notif-from-smart-contract"}},c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"What&#39;s going to happen",id:"whats-going-to-happen",level:2},{value:"Tutorial time",id:"tutorial-time",level:2},{value:"Code",id:"code",level:3},{value:"Add delegate",id:"add-delegate",level:3}];function l(t){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...t.components},{Head:e}=n;return e||function(t,n){throw new Error("Expected "+(n?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This tutorial explains how you can integrate notifications directly in your smart contract by importing Push comm smart contract and using its interface. We will be creating a simple token transfer notification for this guide."}),"\n",(0,i.jsx)(e,{children:(0,i.jsx)("title",{children:"Token Transfer Notification from Smart Contract | Tutorial | Push\nNotifications | Push Documentation"})}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure you have created your channel - ",(0,i.jsx)(n.a,{href:"/docs/notifications/tutorials/create-your-channel/",title:"Guide to create your channel for sending notifications from Push protocol",children:"Creating your channel"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ensure you know what are channel delegates - ",(0,i.jsx)(n.a,{href:"/docs/notifications/tutorials/create-your-channel/#adding-delegates-for-channel",title:"Guide to adding delegates for your channel",children:"Adding channel delegates"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ensure you know types of notifications to know what you want to send - ",(0,i.jsx)(n.a,{href:"/docs/notifications/build/types-of-notification/",title:"Guide explaining the types of notifications",children:"Types of notifications"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"whats-going-to-happen",children:"What's going to happen"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We create a channel and copy it's address"}),"\n",(0,i.jsx)(n.li,{children:"We import interface and function call to trigger notification"}),"\n",(0,i.jsx)(n.li,{children:"We deploy the contract and add the contract address as delegate"}),"\n",(0,i.jsx)(n.li,{children:"Watch in \ud83d\ude32 as each transfer now notifies the wallet address about tokens received"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tutorial-time",children:"Tutorial time"}),"\n",(0,i.jsxs)(n.p,{children:["Push protocol also supports sending notifications to user wallets directly from your smart contract and that too by ",(0,i.jsx)(n.strong,{children:"only adding 2 lines of extra code to your smart contract"})," \ud83c\udf89."]}),"\n",(0,i.jsx)(n.p,{children:"The best way to do it is by creating your channel first > tweaking your smart contract with notification logic and finally adding the deployed contract address as delegate to your channel."}),"\n",(0,i.jsxs)(n.p,{children:["To learn more about how to import interface and the function call of send notification, please see ",(0,i.jsx)(n.a,{href:"/docs/notifications/build/send-notification-via-smart-contract/",title:"Smart contract intergace to send notification",children:"send notification (via smart contract)"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"code",children:"Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'pragma solidity ^0.6.2;\n\nimport "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/ERC20.sol";\n\n// PUSH Comm Contract Interface\ninterface IPUSHCommInterface {\n    function sendNotification(address _channel, address _recipient, bytes calldata _identity) external;\n}\n\ncontract Push is ERC20 {\n    // EPNS COMM ADDRESS ON ETHEREUM KOVAN, CHECK THIS: https://docs.epns.io/developers/developer-tooling/epns-smart-contracts/epns-contract-addresses\n    address public EPNS_COMM_ADDRESS = 0x87da9Af1899ad477C67FeA31ce89c1d2435c77DC;\n\n    constructor ()\n        ERC20("Push Token", "PUSH")\n        public {\n        _mint(msg.sender, 1000 * 10 ** uint(decimals()));\n    }\n\n    function transfer(address to, uint amount) override public returns (bool success) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n\n        //"0+3+Hooray! ", msg.sender, " sent ", token amount, " PUSH to you!"\n        IPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\n            0x050Ca75E3957c37dDF26D58046d8F9967B88190c, // from channel\n            to, // to recipient, put address(this) in case you want Broadcast or Subset. For Targeted put the address to which you want to send\n            bytes(\n                string(\n                    // We are passing identity here: https://docs.epns.io/developers/developer-guides/sending-notifications/advanced/notification-payload-types/identity/payload-identity-implementations\n                    abi.encodePacked(\n                        "0", // this is notification identity: https://docs.epns.io/developers/developer-guides/sending-notifications/advanced/notification-payload-types/identity/payload-identity-implementations\n                        "+", // segregator\n                        "3", // this is payload type: https://docs.epns.io/developers/developer-guides/sending-notifications/advanced/notification-payload-types/payload (1, 3 or 4) = (Broadcast, targeted or subset)\n                        "+", // segregator\n                        "Tranfer Alert", // this is notification title\n                        "+", // segregator\n                        "Hooray! ", // notification body\n                        addressToString(msg.sender), // notification body\n                        " sent ", // notification body\n                        uint2str(amount.div(10 ** uint(decimals()))), // notification body\n                        " PUSH to you!" // notification body\n                    )\n                )\n            )\n        );\n\n        return true;\n    }\n\n    // Helper function to convert address to string\n    function addressToString(address _address) internal pure returns(string memory) {\n        bytes32 _bytes = bytes32(uint256(uint160(_address)));\n        bytes memory HEX = "0123456789abcdef";\n        bytes memory _string = new bytes(42);\n        _string[0] = \'0\';\n        _string[1] = \'x\';\n        for(uint i = 0; i < 20; i++) {\n            _string[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\n            _string[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n        }\n        return string(_string);\n    }\n\n    // Helper function to convert uint to string\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return "0";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"add-delegate",children:"Add delegate"}),"\n",(0,i.jsxs)(n.p,{children:["The only remaining step is to deploy your contract and then go to your channel and ",(0,i.jsx)(n.a,{href:"/docs/notifications/tutorials/create-your-channel/#adding-delegates-for-channel",title:"Add delegate to your channel",children:"add the smart contract address as delegate to your channel"})," which will allow that smart contract address to send notification on behalf of your channel."]}),"\n",(0,i.jsx)(n.p,{children:"That's it! Your channel should now send notification as soon as anyone transfer your tokens from one address to the other \ud83c\udf89\ud83c\udf89\ud83c\udf89!"})]})}function u(t={}){const{wrapper:n}={...(0,o.a)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(l,{...t})}):l(t)}},11151:function(t,n,e){e.d(n,{Z:function(){return s},a:function(){return a}});var i=e(67294);const o={},r=i.createContext(o);function a(t){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:a(t.components),i.createElement(r.Provider,{value:n},t.children)}}}]);